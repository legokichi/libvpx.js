diff --git a/build/make/configure.sh b/build/make/configure.sh
index ac60f50..3b7d490 100644
--- a/build/make/configure.sh
+++ b/build/make/configure.sh
@@ -456,7 +456,7 @@ NM=${NM}
 
 CFLAGS  = ${CFLAGS}
 CXXFLAGS  = ${CXXFLAGS}
-ARFLAGS = -crs\$(if \$(quiet),,v)
+ARFLAGS = crs\$(if \$(quiet),,v)
 LDFLAGS = ${LDFLAGS}
 ASFLAGS = ${ASFLAGS}
 extralibs = ${extralibs}
@@ -1337,6 +1337,22 @@ EOF
           ;;
       esac
       ;;
+    asmjs-unknown-emscripten)
+      # echo "@ " $toolchain " = asmjs-unknown-emscripten""
+      # echo "@ " $tgt_isa "-" $tgt_os "-" $tgt_cc
+      CC=emcc
+      LD=llvm-link
+      AR=llvm-ar
+      AS=llvm-as
+      NM=llvm-nm
+      tune_cflags=""
+      tune_asflags=""
+      add_cflags -emit-llvm
+      #add_ldflags
+      #add_asflags
+      disabled multithread
+      HAVE_GNU_STRIP=no
+      ;;
     *-gcc|generic-gnu)
       link_with_cc=gcc
       enable_feature gcc
diff --git a/configure b/configure
index 379c2f4..deb0965 100755
--- a/configure
+++ b/configure
@@ -155,6 +155,7 @@ all_platforms="${all_platforms} x86_64-win64-vs11"
 all_platforms="${all_platforms} x86_64-win64-vs12"
 all_platforms="${all_platforms} x86_64-win64-vs14"
 all_platforms="${all_platforms} generic-gnu"
+all_platforms="${all_platforms} asmjs-unknown-emscripten"
 
 # all_targets is a list of all targets that can be configured
 # note that these should be in dependency order for now.
diff --git a/vp8/vp8_dx_iface.c b/vp8/vp8_dx_iface.c
index 9ea9c7f..c4c2fdf 100644
--- a/vp8/vp8_dx_iface.c
+++ b/vp8/vp8_dx_iface.c
@@ -7,7 +7,7 @@
  *  in the file PATENTS.  All contributing project authors may
  *  be found in the AUTHORS file in the root of the source tree.
  */
-
+#include <stdio.h>
 #include <assert.h>
 #include <stdlib.h>
 #include <string.h>
@@ -143,7 +143,6 @@ static vpx_codec_err_t vp8_peek_si_internal(const uint8_t *data,
       clear = clear_buffer;
     }
     si->is_kf = 0;
-
     if (data_sz >= 10 && !(clear[0] & 0x01)) /* I-Frame */
     {
       si->is_kf = 1;
@@ -156,7 +155,7 @@ static vpx_codec_err_t vp8_peek_si_internal(const uint8_t *data,
       si->w = (clear[6] | (clear[7] << 8)) & 0x3fff;
       si->h = (clear[8] | (clear[9] << 8)) & 0x3fff;
 
-      /*printf("w=%d, h=%d\n", si->w, si->h);*/
+      //printf("w=%d, h=%d\n", si->w, si->h);
       if (!(si->h && si->w)) res = VPX_CODEC_CORRUPT_FRAME;
     } else {
       res = VPX_CODEC_UNSUP_BITSTREAM;
@@ -322,6 +321,7 @@ static vpx_codec_err_t vp8_decode(vpx_codec_alg_priv_t *ctx,
     }
 
     res = vp8_create_decoder_instances(&ctx->yv12_frame_buffers, &oxcf);
+    printf("after vp8_create_decoder_instances: %d\n", res);
     if (res == VPX_CODEC_OK) ctx->decoder_init = 1;
   }
 
@@ -434,6 +434,7 @@ static vpx_codec_err_t vp8_decode(vpx_codec_alg_priv_t *ctx,
     ctx->user_priv = user_priv;
     if (vp8dx_receive_compressed_data(pbi, data_sz, data, deadline)) {
       res = update_error_state(ctx, &pbi->common.error);
+      printf("after vp8dx_receive_compressed_data: %d\n", res);
     }
 
     /* get ready for the next series of fragments */
diff --git a/vpx/src/vpx_codec.c b/vpx/src/vpx_codec.c
index 10331aa..15b81c1 100644
--- a/vpx/src/vpx_codec.c
+++ b/vpx/src/vpx_codec.c
@@ -124,6 +124,7 @@ void vpx_internal_error(struct vpx_internal_error_info *info,
 
     info->has_detail = 1;
     va_start(ap, fmt);
+    printf("vpx_internal_error: %s\n", fmt);
     vsnprintf(info->detail, sz - 1, fmt, ap);
     va_end(ap);
     info->detail[sz - 1] = '\0';
